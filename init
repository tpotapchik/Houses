#!/usr/bin/env php
<?php

require(__DIR__ . '/vendor/autoload.php');
require(__DIR__ . '/vendor/yiisoft/yii2/Yii.php');

class Init
{

    const MCRYPT_KEY_LENGTH = 32;

    protected $params;
    protected $root;
    protected $envs;
    protected $envsNames;
    protected $envName;
    protected $env;

    protected $confTemplate = "<?php \n\n /* \nDO NOT EDIT THIS FILE, if you what change config do it in `environments` folder and the use `init` script\n*/ \n\n return '{{conf}}';";

    public function start()
    {

        $this->checkMcrypt();
        $this->initVariables();

        if (!isset($this->params['env'])) {
            $this->envName = $this->askEnv();
        } else {
            $this->envName = $this->params['env'];
        }


        if (in_array($this->envName, $this->envsNames)) {
            $this->env = $this->envs[$this->envName];

            $this->compilationConf();

            $this->replaceIndexFiles();

            $this->setWritable($this->env['setWritable']);

            $this->setExecutable($this->env['setExecutable']);
        } else {
            $envsList = implode(', ', $this->envsNames);
            echo PHP_EOL . "  $this->env is not a valid environment. Try one of the following: $envsList. " . PHP_EOL;
        }
    }

    protected function checkMcrypt()
    {
        if (!extension_loaded('mcrypt')) {
            die('The mcrypt PHP extension is required by Yii2.');
        }
    }

    protected function initVariables()
    {
        $this->params = $this->getParams();
        $this->root = str_replace('\\', '/', __DIR__);
        $this->envs = require("$this->root/environments/index.php");
        $this->envsNames = array_keys($this->envs);
    }

    protected function askEnv()
    {
        echo "Which environment do you want the application to be initialized in?" . PHP_EOL . PHP_EOL;
        foreach ($this->envsNames as $i => $name) {
            echo "  [$i] $name\n";
        }
        echo "\n  Your choice [0-" . (count($this->envs) - 1) . ', or any other to quit] ';
        $answer = trim(fgets(STDIN));

        if (!ctype_digit($answer) || !isset($this->envsNames[$answer])) {
            echo PHP_EOL . "  Quit initialization." . PHP_EOL;
            exit;
        }

        return $this->envsNames[$answer];
    }

    protected function compilationConf()
    {
        echo "Start init configs" . PHP_EOL;

        $parentConf = $this->getConf('base');
        $childConf = $this->getConf($this->envName);
        $resultConf = yii\helpers\ArrayHelper::merge($parentConf, $childConf);
        $this->saveConfs($resultConf);

        echo "Configs reinited" . PHP_EOL . PHP_EOL;
    }

    protected function getConf($envName)
    {
        $conf = [];
        $common = $this->getConfPart($envName, 'common', $this->envs[$envName]['confs']['common']);

        foreach ($this->envs[$envName]['confs'] as $partName => $parts) {
            $conf[$partName] = yii\helpers\ArrayHelper::merge($common, $this->getConfPart($envName, $partName, $parts));
        }

        return $conf;
    }

    protected function getConfPart($envName, $partName, $parts)
    {
        $conf = require($this->root . '/environments/' . $envName . '/' . $partName . '/config/' . $parts['main']);
        $conf['params'] = require($this->root . '/environments/' . $envName . '/' . $partName . '/config/' . $parts['params']);

        if (isset($this->envs[$envName]['setCookieValidationKey']) && in_array($partName . '/config/' . $parts['main'],
                $this->envs[$envName]['setCookieValidationKey'])
        ) {
            $conf['components']['request']['cookieValidationKey'] = $this->getMcryptKey();
        }

        return $conf;
    }

    protected function saveConfs($confs)
    {
        foreach ($confs as $folder => $conf) {
            $path = $this->root . '/' . $folder . '/' . 'config' . '/config.php';

            echo '    created:' . $path . PHP_EOL;

            file_put_contents($path, $this->renderConfTemplate($conf));
        }
    }

    protected function renderConfTemplate($conf)
    {
        return str_replace('{{conf}}', base64_encode(serialize($conf)), $this->confTemplate);
    }

    protected function getMcryptKey()
    {
        $bytes = mcrypt_create_iv(self::MCRYPT_KEY_LENGTH, MCRYPT_DEV_URANDOM);
        return strtr(substr(base64_encode($bytes), 0, self::MCRYPT_KEY_LENGTH), '+/=', '_-.');
    }

    protected function replaceIndexFiles()
    {
        if (isset($this->env['index_files'])) {
            echo "Start replace index files " . PHP_EOL;

            foreach ($this->env['index_files'] as $part => $folder) {
                foreach ($folder as $folderName => $files) {
                    foreach ($files as $file) {
                        $fromPath = $this->root . '/environments/' . $this->envName . '/' . $part . '/' . $folderName . '/' . $file;
                        $toPath = $this->root . '/' . $part . '/' . $folderName . '/' . $file;

                        echo '    replaced:' . $toPath . PHP_EOL;

                        file_put_contents($toPath, file_get_contents($fromPath));
                    }
                }
            }

            echo "Index files replaced" . PHP_EOL . PHP_EOL;
        }
    }

    protected function setExecutable($paths)
    {
        foreach ($paths as $executable) {
            echo str_pad($executable, 40, ' ') . ' setted as executable' . PHP_EOL;
            @chmod("$this->root/$executable", 0755);
        }
    }

    protected function setWritable($paths)
    {
        foreach ($paths as $writable) {
            echo str_pad($writable, 40, ' ') . ' setted as writable' . PHP_EOL;
            @chmod("$this->root//$writable", 0777);
        }
    }

    protected function getParams()
    {
        $rawParams = [];
        if (isset($_SERVER['argv'])) {
            $rawParams = $_SERVER['argv'];
            array_shift($rawParams);
        }

        $params = [];
        foreach ($rawParams as $param) {
            if (preg_match('/^--(\w+)(=(.*))?$/', $param, $matches)) {
                $name = $matches[1];
                $params[$name] = isset($matches[3]) ? $matches[3] : true;
            } else {
                $params[] = $param;
            }
        }
        return $params;
    }
}

$init = new Init();
$init->start();
